// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(uuid())
  name     String  
  // email String @unique
  avatar   String
  tfa      String?
  intra_id Int     @unique
  xp       Int @default(0)
  wins     Int @default(0)
  loses    Int @default(0)

  Friends   Friend[]   @relation("from")
  Friendsto Friend[]    @relation("to")
  Game1      Game[]     @relation("playerone")
  Game2     Game[]      @relation("playertwo")
  Room      Room[]
  RoomUser  RoomUser[]
  Message   Message[]
}

model Friend {
  user1    User?   @relation("from", fields: [from_id], references: [id], onDelete: Cascade)
  user2    User?   @relation("to", fields: [to_id], references: [id], onDelete: Cascade)
  from_id  String  @unique
  to_id    String  @unique
  accepted Boolean @default(false)
}

model Game {
  id            Int    @unique
  background    String
  player1       User?  @relation("playerone", fields: [player1_id], references: [id], onDelete: Cascade)
  player2       User?  @relation("playertwo", fields: [player2_id], references: [id], onDelete: Cascade)
  player1_id    String @unique
  player2_id    String @unique
  player1_score Int
  plyaer2_score Int
}

enum RoomType {
  public
  private
  protected
}

model Room {
  id            Int       @id @unique @default(autoincrement())
  password      String?
  type          String    @default("public")
  user          User      @relation(fields: [id_user_owner], references: [id], onDelete: Cascade)
  id_user_owner String
  RoomUser      RoomUser[]
  Message       Message[]
}

model RoomUser {
  user    User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String
  room    Room     @relation(fields: [room_id], references: [id], onDelete: Cascade)
  room_id Int 
  admin   Boolean
  ban     Boolean
  mute    DateTime?

  @@id([user_id, room_id])
}

model Message {
  id         Int      @id @unique @default(autoincrement())
  content    String
  created_at DateTime
  room       Room     @relation(fields: [room_id], references: [id], onDelete: Cascade)
  room_id    Int
  user       User     @relation(fields: [from_id], references: [id], onDelete: Cascade)
  from_id    String
}

//userId int
// user User @relation(fileds: [userId] , refernces : [id])

// re   res
